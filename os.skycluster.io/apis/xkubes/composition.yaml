apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: xkubes.os.skycluster.io
spec:
  compositeTypeRef:
    apiVersion: os.skycluster.io/v1alpha1
    kind: XKube
  mode: Pipeline
  pipeline:
    - step: extra-resources
      functionRef:
        name: function-extra-resources
      input:
        apiVersion: extra-resources.fn.crossplane.io/v1beta1
        kind: Input
        spec:
          extraResources:
            - kind: ProviderConfig
              into: ProviderConfigs
              apiVersion: openstack.crossplane.io/v1beta1
              type: Selector
              selector:
                maxMatch: 1
                minMatch: 1
                matchLabels:
                  - key: skycluster.io/managed-by
                    type: Value
                    value: skycluster
                  - key: skycluster.io/provider-region
                    type: FromCompositeFieldPath
                    valueFromFieldPath: spec.providerRef.region
            - kind: XSetup
              into: SkySetups
              apiVersion: skycluster.io/v1alpha1
              type: Selector
              selector:
                maxMatch: 1
                minMatch: 1
                matchLabels:
                  - key: skycluster.io/managed-by
                    type: Value
                    value: skycluster
            - kind: XSetup
              into: XSetup
              apiVersion: os.skycluster.io/v1alpha1
              type: Selector
              selector:
                maxMatch: 1
                minMatch: 1
                matchLabels:
                  - key: skycluster.io/managed-by
                    type: Value
                    value: skycluster
                  - key: skycluster.io/provider-platform
                    type: Value
                    value: openstack
                  - key: skycluster.io/provider-region
                    type: FromCompositeFieldPath
                    valueFromFieldPath: spec.providerRef.region
                  - key: skycluster.io/provider-zone
                    type: FromCompositeFieldPath
                    valueFromFieldPath: spec.providerRef.zones.primary
                  - key: skycluster.io/application-id
                    type: FromCompositeFieldPath
                    valueFromFieldPath: spec.applicationId
            - kind: ConfigMap
              into: InitScripts
              apiVersion: v1
              type: Selector
              selector:
                minMatch: 1
                maxMatch: 100
                matchLabels:
                  - key: skycluster.io/managed-by
                    type: Value
                    value: skycluster
                  - key: skycluster.io/script-type
                    type: Value
                    value: cloud-init
            - kind: ConfigMap
              into: InitScriptsSSH
              apiVersion: v1
              type: Selector
              selector:
                minMatch: 1
                maxMatch: 100
                matchLabels:
                  - key: skycluster.io/managed-by
                    type: Value
                    value: skycluster
                  - key: skycluster.io/script-type
                    type: Value
                    value: sshtask
    - step: resources
      functionRef:
        name: function-kcl
      input:
        apiVersion: krm.kcl.dev/v1alpha1
        kind: KCLInput
        metadata:
          name: basic
        spec:
          dependencies: |
            helper = { git = "https://github.com/skycluster-project/kcl-modules", version = "0.0.1" }
            provider-kubernetes = { git = "https://github.com/skycluster-project/kcl-modules", version = "0.0.1" }
            provider-helm = { git = "https://github.com/skycluster-project/kcl-modules", version = "0.0.1" }
            provider-openstack = { git = "https://github.com/skycluster-project/kcl-modules", version = "0.0.1" }
          source: |2-

            import yaml
            import helper.v1alpha1.main as helper
            import provider_openstack.v1alpha1 as opv1a1
            import provider_helm.v1beta1 as helmv1b1
            import provider_kubernetes.v1alpha1 as k8sv1a1

            oxr = option("params").oxr # observed composite resource
            ocds = option("params")?.ocds # observed composed resources

            ctx = option("params")?.ctx
            assert ctx is not Undefined, "Context must be provided in the params"

            _extraRes = ctx["apiextensions.crossplane.io/extra-resources"]
            assert _extraRes is not Undefined, "Extra resources must be provided in the context"

            _xsetup = _extraRes["XSetup"][0]
            assert _xsetup is not Undefined, "XSetup must be provided in the extra resources"

            _skySetup = _extraRes["SkySetups"][0]
            assert _skySetup is not Undefined, "SkySetup must be provided in the extra resources"

            _provCfg = _extraRes["ProviderConfigs"]?[0]
            assert _provCfg is not Undefined, "ProviderConfig must be provided in the extra resources"

            _xSetup = _extraRes["XSetup"][0]
            assert _xSetup is not Undefined, "XSetup must be provided in the extra resources"

            _initScripts = _extraRes["InitScripts"]
            assert _initScripts is not Undefined, "Init scripts must be provided in the extra resources"

            _oxrName = oxr.metadata.name
            _oxrProvRegion = oxr.spec.providerRef.region
            _oxrProvZone = oxr.spec.providerRef.zones.primary
            _oxrProvPlatform = oxr.spec.providerRef.platform
            _oxrAppId = oxr.spec.applicationId or Undefined
            _oxrAnnotations = oxr.metadata.annotations

            _defaults = {
              providerConfigRef = {
                name = _provCfg.metadata.name
              },
            }

            _default_labels = {
              **oxr.metadata?.labels,
              **helper._set_default_labels(_oxrProvPlatform, _oxrProvRegion, _oxrProvZone, _oxrAppId),
            }

            _default_annotations = {
              **oxr.metadata?.annotations,
              **helper._is_paused_label(oxr.metadata.labels),
            }

            assert _oxrProvRegion and _oxrProvZone and _oxrProvPlatform, \
              "Provider region, primary zone, platform must be specified"

            _ns = "skycluster-system"
            _ud = oxr.spec?.userData or Undefined
            _scripts = ["k3s-controller"]
            _defaultUserData: any = yaml.decode(helper._select_init_scripts(_initScripts, _scripts)) or Undefined
            _userDataCtrl = helper._append_init_scripts([_defaultUserData] + ([yaml.decode(_ud)] if _ud else []))

            _userDataCtrl = _userDataCtrl.replace("__PROVIDERPLATFORM__", _oxrProvPlatform)
            _userDataCtrl = _userDataCtrl.replace("__REGION__", _oxrProvRegion)
            _userDataCtrl = _userDataCtrl.replace("__ZONE__", _oxrProvZone)

            _items = []

            _controllerNodes = [n for n in oxr.spec.nodeGroups if n and n.role == "control-plane" ]
            _items += [
              {
                "apiVersion": "os.skycluster.io/v1alpha1",
                "kind": "XInstance",
                "metadata": {
                  labels = _default_labels
                  annotations = _default_annotations | {
                    **helper._set_resource_name("ctrl{}".format(i)),
                  },
                },
                "spec": {
                  "applicationId": _oxrAppId,
                  "ipForwarding": True,
                  "image": "ubuntu-24.04",
                  "flavor": n.instanceType,
                  "publicIp": True,
                  "providerRef" = {
                    "platform" = _oxrProvPlatform,
                    "region" = _oxrProvRegion,
                    "zone" = _oxrProvZone
                  },
                  "userData": _userDataCtrl
                }
              } for i, n in _controllerNodes
            ] if _controllerNodes else []



            dxr = {
              **option("params").dxr,
              status.log = helper._append_init_scripts([_defaultUserData])
            }

            items = [*_items, dxr]
    - step: function-auto-ready
      functionRef:
        name: function-auto-ready
